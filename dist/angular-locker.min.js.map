/*! angular-locker v1.3.1 | (c) 2015  | https://github.com/alejandroSuch/angular-locker/ */
{"version":3,"sources":["angular-locker.min.js"],"names":["root","factory","define","amd","angular","exports","module","window","this","provider","_value","value","param","isFunction","_keyByVal","object","Object","keys","filter","key","_error","msg","Error","defaults","driver","namespace","eventsEnabled","separator","setDefaultDriver","getDefaultDriver","setDefaultNamespace","getDefaultNamespace","setEventsEnabled","enabled","getEventsEnabled","setSeparator","getSeparator","$get","$window","$rootScope","$parse","Locker","_registeredDrivers","local","localStorage","session","sessionStorage","_resolveDriver","hasOwnProperty","_deriveDriver","_driver","_namespace","_eventsEnabled","_separator","_watchers","_cryptoKey","_checkSupport","isUndefined","_supported","l","setItem","removeItem","e","_getPrefix","_serialize","toJson","_unserialize","fromJson","_event","name","payload","$emit","extend","_setItem","oldVal","_getItem","serializedValue","finalValue","sjcl","encrypt","mode","ks","_exists","equals","oldValue","newValue","indexOf","getItem","console","log","item","decrypt","_removeItem","prototype","put","isObject","forEach","isDefined","add","has","get","def","isArray","items","k","arguments","length","forget","map","pull","all","split","splice","join","clean","empty","clear","count","bind","$scope","attr","index","self","watcherId","$id","$watch","newVal","$eval","assign","unbind","dontForget","instance","getDriver","getNamespace","supported","setCryptoKey","isString","replace"],"mappings":"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","file":"angular-locker.min.js","sourcesContent":["/**\n * angular-locker\n *\n * A simple & configurable abstraction for local/session storage in angular projects with SJCL crypto support\n *\n * @link https://github.com/alejandroSuch/angular-locker/\n * @author Sean Tymon @tymondesigns\n * @author Alejandro Such @alejandro_such\n * @license MIT License, http://www.opensource.org/licenses/MIT\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return factory(root.angular);\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory(root.angular || (window && window.angular));\n    } else {\n        factory(root.angular);\n    }\n})(this, function (angular) {\n\n    'use strict';\n\n    angular.module('angular-locker', [])\n\n    .provider('locker', function () {\n\n        /**\n         * If value is a function then execute, otherwise return\n         *\n         * @param  {Mixed}  value\n         * @param  {Mixed}  parameter\n         * @return {Mixed}\n         */\n        var _value = function (value, param) {\n            return angular.isFunction(value) ? value(param) : value;\n        };\n\n        /**\n         * Get the key of an object by the value\n         *\n         * @param  {Object}  object\n         * @param  {Mixed}   value\n         * @return {String}\n         */\n        var _keyByVal = function (object, value) {\n            return Object.keys(object).filter(function (key) { return object[key] === value; })[0];\n        };\n\n        /**\n         * Trigger an error\n         *\n         * @param  {String}  msg\n         * @return {void}\n         */\n        var _error = function (msg) {\n            throw new Error('[angular-locker] ' + msg);\n        };\n\n        /**\n         * Set the default driver and namespace\n         *\n         * @type {Object}\n         */\n        var defaults = {\n            driver: 'local',\n            namespace: 'locker',\n            eventsEnabled: true,\n            separator: '.'\n        };\n\n        var cryptoKey = null;\n\n        return {\n             /**\n             * Allow setting of default storage driver via `lockerProvider`\n             * e.g. lockerProvider.setDefaultDriver('session');\n             *\n             * @param {String}  driver\n             */\n            setDefaultDriver: function (driver) {\n                defaults.driver = _value(driver);\n\n                return this;\n            },\n\n            /**\n             * Get the default driver\n             */\n            getDefaultDriver: function () {\n                return defaults.driver;\n            },\n\n            /**\n             * Allow setting of default namespace via `lockerProvider`\n             * e.g. lockerProvider.setDefaultNamespace('myAppName');\n             *\n             * @param {String}  namespace\n             */\n            setDefaultNamespace: function (namespace) {\n                defaults.namespace = _value(namespace);\n\n                return this;\n            },\n\n            /**\n             * Get the default namespace\n             */\n            getDefaultNamespace: function () {\n                return defaults.namespace;\n            },\n\n            /**\n             * Set whether the events are enabled\n             *\n             * @param {Boolean}  enabled\n             */\n            setEventsEnabled: function (enabled) {\n                defaults.eventsEnabled = _value(enabled);\n\n                return this;\n            },\n\n            /**\n             * Get whether the events are enabled\n             */\n            getEventsEnabled: function () {\n                return defaults.eventsEnabled;\n            },\n\n            /**\n             * Set the separator to use with namespace in keys\n             *\n             * @param {String} separator\n             */\n            setSeparator: function (separator) {\n                defaults.separator = _value(separator);\n\n                return this;\n            },\n\n            /**\n             * Get the separator\n             */\n            getSeparator: function () {\n                return defaults.separator;\n            },\n\n            /**\n             * The locker service\n             */\n            $get: ['$window', '$rootScope', '$parse', function ($window, $rootScope, $parse) {\n\n                /**\n                 * Define the Locker class\n                 *\n                 * @param {Storage}  driver\n                 * @param {String}   namespace\n                 */\n                function Locker (driver, namespace) {\n\n                    /**\n                     * @type {Object}\n                     */\n                    this._registeredDrivers = {\n                        local: $window.localStorage,\n                        session: $window.sessionStorage\n                    };\n\n                    /**\n                     * Get the Storage instance from the key\n                     *\n                     * @param  {String}  driver\n                     * @return {Storage}\n                     */\n                    this._resolveDriver = function (driver) {\n                        if (! this._registeredDrivers.hasOwnProperty(driver)) {\n                            _error('The driver \"' + driver + '\" was not found.');\n                        }\n\n                        return this._registeredDrivers[driver];\n                    };\n\n                    /**\n                     * Get the driver key (local/session) by the Storage instance\n                     *\n                     * @param  {Storage}  driver\n                     * @return {String}\n                     */\n                    this._deriveDriver = function (driver) {\n                        return _keyByVal(this._registeredDrivers, driver);\n                    };\n\n                    /**\n                     * @type {Storage}\n                     */\n                    this._driver = this._resolveDriver(driver);\n\n                    /**\n                     * @type {String}\n                     */\n                    this._namespace = namespace;\n\n                    /**\n                     * @type {Boolean}\n                     */\n                    this._eventsEnabled = defaults.eventsEnabled;\n\n                    /**\n                     * @type {String}\n                     */\n                    this._separator = defaults.separator;\n\n                    /**\n                     * @type {Object}\n                     */\n                    this._watchers = {};\n\n                    /**\n                     * @type {String}\n                     */\n                    this._cryptoKey = null;\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    this._checkSupport = function (driver) {\n                        if (angular.isUndefined(this._supported)) {\n                            var l = 'l';\n                            try {\n                                this._resolveDriver(driver || 'local').setItem(l, l);\n                                this._resolveDriver(driver || 'local').removeItem(l);\n                                this._supported = true;\n                            } catch (e) {\n                                this._supported = false;\n                            }\n                        }\n\n                        return this._supported;\n                    };\n\n                    /**\n                     * Build the storage key from the namspace\n                     *\n                     * @param  {String}  key\n                     * @return {String}\n                     */\n                    this._getPrefix = function (key) {\n                        if (! this._namespace) return key;\n\n                        return this._namespace + this._separator + key;\n                    };\n\n                    /**\n                     * Try to encode value as json, or just return the value upon failure\n                     *\n                     * @param  {Mixed}  value\n                     * @return {Mixed}\n                     */\n                    this._serialize = function (value) {\n                        try {\n                            return angular.toJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Try to parse value as json, if it fails then it probably isn't json so just return it\n                     *\n                     * @param  {String}  value\n                     * @return {Object|String}\n                     */\n                    this._unserialize = function (value) {\n                        try {\n                            return angular.fromJson(value);\n                        } catch (e) {\n                            return value;\n                        }\n                    };\n\n                    /**\n                     * Trigger an event\n                     *\n                     * @param  {String} name\n                     * @param  {Object} payload\n                     * @return {void}\n                     */\n                    this._event = function (name, payload) {\n                        if (! this._eventsEnabled) return;\n\n                        $rootScope.$emit(name, angular.extend(payload, {\n                            driver: this._deriveDriver(this._driver),\n                            namespace: this._namespace\n                        }));\n                    };\n\n                    /**\n                     * Add to storage\n                     *\n                     * @param {String}  key\n                     * @param {Mixed}  value\n                     */\n                    this._setItem = function (key, value) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        try {\n                            var oldVal = this._getItem(key);\n                            var serializedValue = this._serialize(value);\n                            var finalValue = serializedValue;\n\n                            if(window.sjcl && this._cryptoKey && !!finalValue) {\n                                finalValue = window.sjcl.encrypt(this._cryptoKey, serializedValue, { mode: 'ccm', ks: 128 }, {});\n                            }\n\n                            this._driver.setItem(this._getPrefix(key), finalValue);\n                            if (this._exists(key) && ! angular.equals(oldVal, finalValue)) {\n                                this._event('locker.item.updated', { key: key, oldValue: oldVal, newValue: finalValue });\n                            } else {\n                                this._event('locker.item.added', { key: key, value: value });\n                            }\n                        } catch (e) {\n                            if (['QUOTA_EXCEEDED_ERR', 'NS_ERROR_DOM_QUOTA_REACHED', 'QuotaExceededError'].indexOf(e.name) !== -1) {\n                                _error('The browser storage quota has been exceeded');\n                            } else {\n                                _error('Could not add item with key \"' + key + '\"');\n                            }\n                        }\n                    };\n\n                    /**\n                     * Get from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Mixed}\n                     */\n                    this._getItem = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        var finalValue = this._driver.getItem(this._getPrefix(key));\n                        console.log('GETITEM', finalValue, key);\n                        var item = finalValue;\n\n                        if(window.sjcl && this._cryptoKey && !!finalValue) {\n                            item = window.sjcl.decrypt(this._cryptoKey, finalValue, {}, {});\n                        }\n\n                        return this._unserialize(item);\n                    };\n\n                    /**\n                     * Exists in storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._exists = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        return this._driver.hasOwnProperty(this._getPrefix(_value(key)));\n                    };\n\n                    /**\n                     * Remove from storage\n                     *\n                     * @param  {String}  key\n                     * @return {Boolean}\n                     */\n                    this._removeItem = function (key) {\n                        if (! this._checkSupport()) _error('The browser does not support localStorage');\n\n                        if (! this._exists(key)) return false;\n                        this._driver.removeItem(this._getPrefix(key));\n\n                        this._event('locker.item.forgotten', { key: key });\n\n                        return true;\n                    };\n                }\n\n                /**\n                 * Define the public api\n                 *\n                 * @type {Object}\n                 */\n                Locker.prototype = {\n\n                    /**\n                     * Add a new item to storage (even if it already exists)\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {self}\n                     */\n                    put: function (key, value) {\n                        if (! key) return false;\n                        key = _value(key);\n\n                        if (angular.isObject(key)) {\n                            angular.forEach(key, function (value, key) {\n                                this._setItem(key, value);\n                            }, this);\n                        } else {\n                            if (! angular.isDefined(value)) return false;\n                            this._setItem(key, _value(value, this._getItem(key)));\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Add an item to storage if it doesn't already exist\n                     *\n                     * @param  {Mixed}  key\n                     * @param  {Mixed}  value\n                     * @return {Boolean}\n                     */\n                    add: function (key, value) {\n                        if (! this.has(key)) {\n                            this.put(key, value);\n                            return true;\n                        }\n\n                        return false;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    get: function (key, def) {\n                        if (angular.isArray(key)) {\n                            var items = {};\n                            angular.forEach(key, function (k) {\n                                if (this.has(k)) items[k] = this._getItem(k);\n                            }, this);\n\n                            return items;\n                        }\n\n                        if (! this.has(key)) return arguments.length === 2 ? def : void 0;\n\n                        return this._getItem(key);\n                    },\n\n                    /**\n                     * Determine whether the item exists in storage\n                     *\n                     * @param  {String|Function}  key\n                     * @return {Boolean}\n                     */\n                    has: function (key) {\n                        return this._exists(key);\n                    },\n\n                    /**\n                     * Remove specified item(s) from storage\n                     *\n                     * @param  {Mixed}  key\n                     * @return {Object}\n                     */\n                    forget: function (key) {\n                        key = _value(key);\n\n                        if (angular.isArray(key)) {\n                            key.map(this._removeItem, this);\n                        } else {\n                            this._removeItem(key);\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Retrieve the specified item from storage and then remove it\n                     *\n                     * @param  {String|Array}  key\n                     * @param  {Mixed}  def\n                     * @return {Mixed}\n                     */\n                    pull: function (key, def) {\n                        var value = this.get(key, def);\n                        this.forget(key);\n\n                        return value;\n                    },\n\n                    /**\n                     * Return all items in storage within the current namespace\n                     *\n                     * @return {Object}\n                     */\n                    all: function () {\n                        var items = {};\n                        angular.forEach(this._driver, function (value, key) {\n                            var split = key.split(this._separator);\n                            if (split.length > 1 && split[0] === this._namespace) {\n                                split.splice(0, 1);\n                                key = split.join(this._separator);\n                            }\n                            if (this.has(key)) items[key] = this.get(key);\n                        }, this);\n\n                        return items;\n                    },\n\n                    /**\n                     * Remove all items set within the current namespace\n                     *\n                     * @return {self}\n                     */\n                    clean: function () {\n                        this.forget(Object.keys(this.all()));\n\n                        return this;\n                    },\n\n                    /**\n                     * Empty the current storage driver completely. careful now.\n                     *\n                     * @return {self}\n                     */\n                    empty: function () {\n                        this._driver.clear();\n\n                        return this;\n                    },\n\n                    /**\n                     * Get the total number of items within the current namespace\n                     *\n                     * @return {Integer}\n                     */\n                    count: function () {\n                        return Object.keys(this.all()).length;\n                    },\n\n                    /**\n                     * Bind a storage key to a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @param  {Mixed}   def\n                     * @param  {String}  attr\n                     * @return {self}\n                     */\n                    bind: function ($scope, key, def, attr) {\n                        var index = attr || key;\n\n                        var self = this;\n                        var watcherId = (index + $scope.$id);\n\n                        this._watchers[ watcherId] = $scope.$watch(index, function (newVal) {\n                            if (angular.isDefined(newVal)) {\n                                self.put(key, newVal);\n                            }\n                        }, angular.isObject($scope[index]));\n\n                        if (angular.isUndefined( $scope.$eval(index) )) {\n                            var value = this.get(key, def);\n                            $parse(index).assign($scope, value);\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Unbind a storage key from a $scope property\n                     *\n                     * @param  {Object}  $scope\n                     * @param  {String}  key\n                     * @param  {String}  attr\n                     * @param  {boolean}  dontForget\n                     * @return {self}\n                     */\n                    unbind: function ($scope, key, attr, dontForget) {\n                        var index = attr || key;\n\n                        $parse(index).assign($scope, null);\n\n                        if(!dontForget) {\n                            console.log('forgettign');\n                            this.forget(key);\n                        } else {\n                            console.log('dont forget');\n                        }\n\n                        var watcherId = (index + $scope.$id);\n                        if (this._watchers[ watcherId]) {\n                            this._watchers[watcherId]();\n                            delete this._watchers[watcherId];\n                        }\n\n                        return this;\n                    },\n\n                    /**\n                     * Set the storage driver on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  driver\n                     * @return {self}\n                     */\n                    driver: function (driver) {\n                        return this.instance(driver, this._namespace);\n                    },\n\n                    /**\n                     * Get the currently set driver\n                     *\n                     * @return {Storage}\n                     */\n                    getDriver: function () {\n                        return this._driver;\n                    },\n\n                    /**\n                     * Set the namespace on a new instance to enable overriding defaults\n                     *\n                     * @param  {String}  namespace\n                     * @return {self}\n                     */\n                    namespace: function (namespace) {\n                        return this.instance(this._deriveDriver(this._driver), namespace);\n                    },\n\n                    /**\n                     * Get the currently set namespace\n                     *\n                     * @return {String}\n                     */\n                    getNamespace: function () {\n                        return this._namespace;\n                    },\n\n                    /**\n                     * Check browser support\n                     *\n                     * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/storage/localstorage.js#L38-L47\n                     * @param  {String}  driver\n                     * @return {Boolean}\n                     */\n                    supported: function (driver) {\n                        return this._checkSupport(driver);\n                    },\n\n                    /**\n                     *\n                     * @param {String} key\n                     */\n                    setCryptoKey: function(key){\n                        if (!angular.isString(key) || key.length === 0 || key.replace(/\\s/gm, '').length === 0) { // Check non-blank\n                            return;\n                        }\n\n                        this._cryptoKey = key;\n                    },\n\n                    /**\n                     * Get a new instance of Locker\n                     *\n                     * @param  {String}  driver\n                     * @param  {String}  namespace\n                     * @return {Locker}\n                     */\n                    instance: function (driver, namespace) {\n                        return new Locker(driver, namespace);\n                    }\n                };\n\n                // return the default instance\n                return new Locker(defaults.driver, defaults.namespace);\n            }]\n        };\n\n    });\n\n});\n"],"sourceRoot":"/source/"}